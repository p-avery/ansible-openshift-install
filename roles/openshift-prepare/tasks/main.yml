---
- name: install epel
  yum:
    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    state: present
  ignore_errors: true

- name: install packages
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
  - PyYAML
  - python-devel
  - openssl-devel
  - iptables-services
  - bridge-utils
  - NetworkManager
  - ntp
  ignore_errors: true

- name: install packages atomic
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
  - atomic-openshift-utils
  - atomic-openshift-excluder
  - atomic-openshift-docker-excluder
  ignore_errors: true
  when: ansible_distribution == 'RedHat'

- name: install more packages
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
  - python-pip

- name: pip upgrade setuptools and pip
  pip:
    name: "{{ item }}"
    state: latest
  with_items:
  - pip
  - setuptools

- name: enable selinux
  selinux:
    policy: targeted
    state: enforcing
  register: selinux

- name: enable and start services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
  - ntpd
  - NetworkManager

- name: Reboot server
  shell: "sleep 3; /usr/sbin/shutdown -r now"
  async: 1
  poll: 0
  failed_when: false
  changed_when: true
  ignore_errors: true
  when: ansible_ssh_host != '127.0.0.1' and selinux.changed

- name: Wait for reboot to start
  pause:
    seconds: 5
  when: selinux.changed

- name: waiting for system to come online
  wait_for: host="{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}" port="{{ hostvars[inventory_hostname].ansible_ssh_port | default('22') }}" search_regex=OpenSSH
  delegate_to: 127.0.0.1
  become: no
  when: inventory_hostname != '127.0.0.1' or hostvars[inventory_hostname].ansible_host != '127.0.0.1' and selinux.changed

- name: unexclude atomic-openshift package for the duration of the install
  command: atomic-openshift-excluder unexclude
  when: ansible_distribution == 'RedHat'

- name: install Docker
  yum: name=docker state=installed update_cache=yes
  register: dockerInstalled
  notify:
  - Start Docker

- name: Insecure Registry Config
  lineinfile: dest=/etc/sysconfig/docker  regexp="^OPTIONS" line=OPTIONS='--selinux-enabled --insecure-registry 172.30.0.0/16 --log-opt max-size=1M --log-opt max-file=3' backup=yes backrefs=yes state=present
  register: dockerConfigUpdated

- name: Create Docker Storage Config
  blockinfile:
    dest: /etc/sysconfig/docker-storage-setup
    create: yes
    content: |
      DEVS={{ docker_storage_mount }}
      VG=docker-vg
  register: dockerStorageConfigFileCreated
  when: docker_storage_mount in ansible_devices
  notify:
  - Stop Docker
  - Clean Docker Data

- name: Check if LVS exists
  shell: lvs | grep docker-pool | awk '{ print $1 }'
  register: dockerpoolLVS

- name: Read device information
  parted: device=/dev/{{ docker_storage_mount }} unit=MiB
  register: sd_info
  when: docker_storage_mount is defined and docker_storage_wipe is defined and docker_storage_wipe

# Remove all partitions from disk
- name: remove all partitions
  parted:
    device: /dev/{{ docker_storage_mount }}
    number: "{{ item.num }}"
    state: absent
  with_items:
   - "{{ sd_info.partitions }}"
  when: docker_storage_mount is defined and docker_storage_wipe is defined and docker_storage_wipe

- name: Wipe key from the disk
  command: wipefs -o 0x1fe /dev/{{ docker_storage_mount }}
  when: docker_storage_mount is defined and docker_storage_wipe is defined and docker_storage_wipe

- name: Docker Storage Setup
  command: docker-storage-setup
  register: dockerStorageSetupComplete
  when: dockerpoolLVS.stdout != "docker-pool" and dockerStorageConfigFileCreated|success and docker_storage_mount in ansible_devices
  notify:
  - Stop Docker
  - Clean Docker Data
  - Start Docker


